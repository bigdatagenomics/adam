<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.bdgenomics.adam</groupId>
    <artifactId>adam-parent-spark3_2.12</artifactId>
    <version>0.33.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>adam-core-spark3_2.12</artifactId>
  <packaging>jar</packaging>
  <name>ADAM_${scala.version.prefix}: Core</name>
  <build>
    <plugins>
      <!-- disable surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <!-- enable scalatest -->
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <configuration>
          <reportsDirectory>${project.build.directory}/scalatest-reports</reportsDirectory>
          <junitxml>.</junitxml>
          <filereports>ADAMTestSuite.txt</filereports>
          <!--
              As explained here: http://stackoverflow.com/questions/1660441/java-flag-to-enable-extended-serialization-debugging-info
              The second option allows us better debugging for serialization-based errors.
          -->
          <argLine>-Xmx1024m -Dsun.io.serialization.extendedDebugInfo=true</argLine>
          <stdout>F</stdout>
        </configuration>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/main/scala</source>
                <source>target/generated-sources/src/main/scala</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/test/scala</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-scala-products</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>org.bdgenomics.adam.codegen.DumpSchemasToProduct</mainClass>
              <arguments>
                <argument>org.bdgenomics.adam.sql</argument>
                <argument>org.bdgenomics.formats.avro.Alignment</argument>
                <argument>org.bdgenomics.formats.avro.Dbxref</argument>
                <argument>org.bdgenomics.formats.avro.Feature</argument>
                <argument>org.bdgenomics.formats.avro.Fragment</argument>
                <argument>org.bdgenomics.formats.avro.Genotype</argument>
                <argument>org.bdgenomics.formats.avro.OntologyTerm</argument>
                <argument>org.bdgenomics.formats.avro.ProcessingStep</argument>
                <argument>org.bdgenomics.formats.avro.Reference</argument>
                <argument>org.bdgenomics.formats.avro.Read</argument>
                <argument>org.bdgenomics.formats.avro.Sequence</argument>
                <argument>org.bdgenomics.formats.avro.Slice</argument>
                <argument>org.bdgenomics.formats.avro.TranscriptEffect</argument>
                <argument>org.bdgenomics.formats.avro.Variant</argument>
                <argument>org.bdgenomics.formats.avro.VariantAnnotation</argument>
                <argument>org.bdgenomics.formats.avro.VariantCallingAnnotations</argument>
                <argument>${project.basedir}/target/generated-sources/src/main/scala/org/bdgenomics/adam/sql/Schemas.scala</argument>
              </arguments>
              <classpathScope>compile</classpathScope>
            </configuration>
          </execution>
          <execution>
            <id>generate-scala-projection-fields</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>org.bdgenomics.adam.codegen.DumpSchemasToProjectionEnums</mainClass>
              <arguments>
                <argument>org.bdgenomics.adam.projections</argument>
                <argument>org.bdgenomics.formats.avro.Alignment</argument>
                <argument>org.bdgenomics.formats.avro.Dbxref</argument>
                <argument>org.bdgenomics.formats.avro.Feature</argument>
                <argument>org.bdgenomics.formats.avro.Fragment</argument>
                <argument>org.bdgenomics.formats.avro.Genotype</argument>
                <argument>org.bdgenomics.formats.avro.OntologyTerm</argument>
                <argument>org.bdgenomics.formats.avro.Read</argument>
                <argument>org.bdgenomics.formats.avro.ReadGroup</argument>
                <argument>org.bdgenomics.formats.avro.Reference</argument>
                <argument>org.bdgenomics.formats.avro.Sample</argument>
                <argument>org.bdgenomics.formats.avro.Sequence</argument>
                <argument>org.bdgenomics.formats.avro.Slice</argument>
                <argument>org.bdgenomics.formats.avro.TranscriptEffect</argument>
                <argument>org.bdgenomics.formats.avro.Variant</argument>
                <argument>org.bdgenomics.formats.avro.VariantAnnotation</argument>
                <argument>org.bdgenomics.formats.avro.VariantCallingAnnotations</argument>
                <argument>${project.basedir}/target/generated-sources/src/main/scala/org/bdgenomics/adam/projections/Enums.scala</argument>
              </arguments>
              <classpathScope>compile</classpathScope>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.bdgenomics.utils</groupId>
      <artifactId>utils-misc-spark3_${scala.version.prefix}</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.utils</groupId>
      <artifactId>utils-misc-spark3_${scala.version.prefix}</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.utils</groupId>
      <artifactId>utils-io-spark3_${scala.version.prefix}</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.utils</groupId>
      <artifactId>utils-cli-spark3_${scala.version.prefix}</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.utils</groupId>
      <artifactId>utils-intervalrdd-spark3_${scala.version.prefix}</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.esotericsoftware.kryo</groupId>
      <artifactId>kryo</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.bdg-formats</groupId>
      <artifactId>bdg-formats</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-client</artifactId>
      <!-- provided scope from parent -->
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_${scala.version.prefix}</artifactId>
      <!-- provided scope from parent -->
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_${scala.version.prefix}</artifactId>
    </dependency>
    <dependency>
      <groupId>it.unimi.dsi</groupId>
      <artifactId>fastutil</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.clapper</groupId>
      <artifactId>grizzled-slf4j_${scala.version.prefix}</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.parquet</groupId>
      <artifactId>parquet-avro</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.seqdoop</groupId>
      <artifactId>hadoop-bam</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.github.samtools</groupId>
      <artifactId>htsjdk</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.version.prefix}</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.bdgenomics.adam</groupId>
      <artifactId>adam-codegen-spark3_${scala.version.prefix}</artifactId>
    </dependency>
  </dependencies>
  <profiles>
    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scoverage</groupId>
            <artifactId>scoverage-maven-plugin</artifactId>
            <configuration>
              <excludedPackages>org.bdgenomics.adam.sql</excludedPackages>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
