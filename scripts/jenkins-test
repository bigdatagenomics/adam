#!/usr/bin/env bash

set -e -x

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$DIR/.."

VERSION="$(grep "<version>" "$PROJECT_ROOT/pom.xml"  | head -2 | tail -1 | sed 's/ *<version>//g' | sed 's/<\/version>//g')"
echo "Testing ADAM version ${VERSION} on Spark ${SPARK_VERSION} and Hadoop ${HADOOP_VERSION}"

export MAVEN_OPTS="-Xmx1536m -XX:MaxPermSize=1g"
mvn test -P distribution -Dnetworkconnected -Dhadoop.version="${HADOOP_VERSION}" -Dspark.version="${SPARK_VERSION}"

ADAM_TMP_DIR="$(mktemp -d -t "adamTestXXXXXXX")"
# Just to be paranoid.. use a directory internal to the ADAM_TMP_DIR
ADAM_TMP_DIR="$ADAM_TMP_DIR/deleteMePleaseThisIsNoLongerNeeded"
mkdir "$ADAM_TMP_DIR"

pushd "$PROJECT_ROOT"
# Copy the jar into our temp space for testing
cp -r . "$ADAM_TMP_DIR"
popd

export SPARK_DRIVER_MEMORY=8g

pushd "$ADAM_TMP_DIR"


if [[ $HADOOP_VERSION =~ ^1\.0 ]]; then
    HADOOP=hadoop1
elif [[ $HADOOP_VERSION =~ ^2\.6 ]]; then
    HADOOP=hadoop2.6
elif [[ $HADOOP_VERSION =~ ^2\.3 ]]; then
    HADOOP=hadoop2.3
else
    echo "Unknown Hadoop version."
    exit 1
fi

SPARK="spark-${SPARK_VERSION}"

wget -q http://d3kbcqa49mib13.cloudfront.net/${SPARK}-bin-${HADOOP}.tgz
tar xzvf ${SPARK}-bin-${HADOOP}.tgz
export SPARK_HOME="${ADAM_TMP_DIR}/${SPARK}-bin-${HADOOP}"

ADAM="./bin/adam-submit"

echo "Fetching BAM file"
BAM=mouse_chrM.bam
READS="$BAM".reads.adam
SORTED_READS="$BAM".reads.sorted.adam
FRAGMENTS="$BAM".fragments.adam
rm -rf "$BAM"
wget -q https://s3.amazonaws.com/bdgenomics-test/"$BAM"
echo "Converting BAM to ADAM read format"
rm -rf "$READS"
"$ADAM" transform "$BAM" "$READS"
echo "Converting BAM to ADAM read format with sorting"
rm -rf "$SORTED_READS"
"$ADAM" transform -sort_reads "$READS" "$SORTED_READS"
echo "Converting read file to fragments"
rm -rf "$FRAGMENTS"
"$ADAM" reads2fragments "$READS" "$FRAGMENTS"
echo "Printing reads and fragments"
"$ADAM" print "$READS" 1>/dev/null 2>/dev/null
"$ADAM" print "$FRAGMENTS" 1>/dev/null 2>/dev/null
echo "Printing read statistics"
"$ADAM" flagstat "$READS"
rm -rf "$ADAM_TMP_DIR"
popd

pushd "$PROJECT_ROOT"
./scripts/format-source
if test -n "$(git status --porcelain)"
then
        echo "Please run './scripts/format-source'"
        exit 1
fi
popd

echo
echo "All the tests passed"
echo
